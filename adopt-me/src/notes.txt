app is a component which we can use it anywhere.

we don't need to write a new app component next time

we can use app component as a rubber stamp.
if we want to stamp it anywhere we can use it.

class and instance - rubber stamp and individual stamp of the rubber stamp


JSX - 

combined of rendering logic and UI logic. both are closely coupled.

React doesn't ifluence in differencing Markup and Logic.

Hence going with JSX.

below is neither string nor HTML - 

const element = <h1>Hello, world!</h1>;

Taking HTML and XMLish and out puting that as Javascript so that the browser could understand.




How cross site scripting attacks are prevented ?

It is safe to embed user input in JSX:

By default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered.


example - 

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);


Babel compiles JSX down to React.createElement() calls.

above element gets generated like this -

// Note: this structure is simplified
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};

These objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen.

React reads these objects and uses them to construct the DOM and keep it up to date.



